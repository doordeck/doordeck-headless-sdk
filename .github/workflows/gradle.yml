name: Build

on:
  push:
    branches:
      - 'main'
    tags:
      - v*.*.*
  pull_request:
    branches:
      - 'main'

jobs:
  build:
    env:
      TEST_MAIN_USER_PASSWORD: ${{ secrets.TEST_MAIN_USER_PASSWORD }}
      TEST_MAIN_USER_PRIVATE_KEY: ${{ secrets.TEST_MAIN_USER_PRIVATE_KEY }}
      TEST_ENV_VAR: 9f8e96ae-bed8-43a4-ac5e-2f55dc6a85cb
    strategy:
      max-parallel: 1
      matrix:
        include:
          - name: JVM
            test: jvmTest
            os: ubuntu-latest
          - name: Android
            test: testReleaseUnitTest
            os: ubuntu-latest
          - name: JS
            test: kotlinUpgradeYarnLock jsTest
            os: ubuntu-latest
          - name: Apple
            test: iosX64Test macosArm64Test
            os: macos-latest
          - name: Windows
            test: mingwX64Test
            os: windows-latest
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.name }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
      - name: Tests
        run: ./gradlew ${{ matrix.test }} --rerun-tasks

  release:
    name: Releases
    needs: build
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest

    permissions:
      id-token: write
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "Doordeck Development"
          git config --global user.email "development@doordeck.com"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          registry-url: 'https://registry.npmjs.org'
          scope: '@doordeck'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISHING_TOKEN }}

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Install CocoaPods
        run: |
          sudo gem install cocoapods

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Set up NET
        uses: actions/setup-dotnet@v4
        with:
            dotnet-version: 7.x

      - name: Install ClangSharpPInvokeGenerator
        run: |
          # Install ClangSharpPInvokeGenerator
          dotnet tool install --global ClangSharpPInvokeGenerator
          
          # Install dependencies using nuget
          nuget install libclang.runtime.osx-arm64 \
            -OutputDirectory ${{ env.DOTNET_ROOT }}/tools/.store/nuget_packages
          
          nuget install libClangSharp.runtime.osx-arm64 \
            -OutputDirectory ${{ env.DOTNET_ROOT }}/tools/.store/nuget_packages
          
          # Copy the dlls
          find ${{ env.DOTNET_ROOT }}/tools/.store/nuget_packages \
            -name "*.dylib" \
            -exec cp {} $(find ${{ env.DOTNET_ROOT }}/tools/.store/clangsharppinvokegenerator -type d -path "*/tools/net8.0/any") \;

      - name: Install SWIG
        run: brew install swig

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Configure AWS Credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::135184807345:role/GitHubAction-HeadlessSDKRelease
          aws-region: eu-west-1

      - name: Tag for release (if on main)
        if: github.ref == 'refs/heads/main'
        run: ./gradlew final -x test

      - name: Parse release version
        id: version_info
        run: echo version=$(./gradlew properties -q -Prelease.useLastTag=true | grep "version:" | awk '{print $2}') >> "$GITHUB_OUTPUT"

      - name: Build mingw binaries
        if: github.ref == 'refs/heads/main'
        run: |
          ./gradlew mingwX64Binaries
          
          # Adjust generated header
          sed -i '' \
            -e 's/_\$$/_/g' \
            -e 's/\$//g' \
          "doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk_api.h"

      - name: Publish to PyPi
        run: |
          ./gradlew pythonPack
          
          # Download python for windows
          curl -LO https://www.python.org/ftp/python/3.13.2/python-3.13.2-embed-amd64.zip
          mv python-3.13.2-embed-amd64.zip doordeck-sdk/build/bin/mingwX64
          unzip doordeck-sdk/build/bin/mingwX64/python-3.13.2-embed-amd64.zip -d doordeck-sdk/build/bin/mingwX64/windows-python
          
          # Generate python bindings
          swig -python -D_MSC_VER -o doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk/doordeck_headless_sdk_wrap.c \
            doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk/doordeck_headless_sdk.i
          
          # Compile the module
          x86_64-w64-mingw32-gcc -shared -o doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk/_doordeck_headless_sdk.pyd \
            doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk/doordeck_headless_sdk_wrap.c \
            doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk.dll \
            -I $(python3 -c "import sysconfig; print(sysconfig.get_paths()['include'])") \
            -L doordeck-sdk/build/bin/mingwX64/windows-python \
            -lpython313

      - name: Publish to NuGet
        if: github.ref == 'refs/heads/main'
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
        run: |
          # Generate PInvoke bindings
          ClangSharpPInvokeGenerator \
            -f doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk_api.h \
            -o doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk/DoordeckHeadlessBindings.cs \
            -n Doordeck.Headless.Sdk
          
          # Adjust generated bindings
          sed -i '' \
            -e '/^\s*\[.*NativeTypeName.*\]\s*$/d' \
            -e 's/\[.*NativeTypeName([^]]*)\]//g' \
            -e 's/\[DllImport(""/\[DllImport("Doordeck.Headless.Sdk.dll"/g' \
            "doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk/DoordeckHeadlessBindings.cs"
          
          # Create the .nuspec file
          ./gradlew -Prelease.useLastTag=true csharpPack
          
          # Create the .nupkg file
          nuget pack doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk.nuspec \
            -OutputDirectory doordeck-sdk/build/bin/mingwX64/csharp/
          
          # Publish the package
          nuget push doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk.${{ steps.version_info.outputs.version }}.nupkg \
            -Source https://api.nuget.org/v3/index.json \
            -ApiKey ${{ secrets.NUGET_TOKEN }}

      - name: Publish to SPM
        if: github.ref == 'refs/heads/main'
        run: |
          ./gradlew assembleDoordeckSDKReleaseXCFramework
          aws s3 cp doordeck-sdk/DoordeckSDK.xcframework.zip s3://cdn.doordeck.com/xcframework/v${{ steps.version_info.outputs.version }}/

      - name: Publish to CocoaPods
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: |
          ./gradlew -Prelease.useLastTag=true podSpecRelease
          pod trunk push doordeck-sdk/build/cocoapods/publish/release/DoordeckSDK.podspec --allow-warnings

      - name: Publish to Maven Central
        run: ./gradlew -Prelease.useLastTag=true kotlinUpgradeYarnLock doordeck-sdk:publishToSonatype closeAndReleaseSonatypeStagingRepository -x test
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.MAVEN_TOKEN }}
          MAVEN_SIGN_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MAVEN_SIGN_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      - name: Publish to NPM
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISHING_TOKEN }}
        run: |
          ./gradlew -Prelease.useLastTag=true jsBrowserProductionLibraryDistribution
          cd build/js/packages/doordeck-sdk
          npm publish --access public

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ steps.version_info.outputs.version }} --title "Release v${{ steps.version_info.outputs.version }}" --verify-tag --generate-notes