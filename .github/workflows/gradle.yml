name: Build

on:
  push:
    branches:
      - 'main'
    tags:
      - v*.*.*
  pull_request:
    branches:
      - 'main'

jobs:
#  build:
#    env:
#      TEST_MAIN_USER_PASSWORD: ${{ secrets.TEST_MAIN_USER_PASSWORD }}
#      TEST_MAIN_USER_PRIVATE_KEY: ${{ secrets.TEST_MAIN_USER_PRIVATE_KEY }}
#      TEST_ENV_VAR: 9f8e96ae-bed8-43a4-ac5e-2f55dc6a85cb
#      FUSION_INTEGRATIONS: ${{ secrets.FUSION_INTEGRATIONS }}
#    strategy:
#      max-parallel: 1
#      matrix:
#        include:
#          - name: JVM
#            test: jvmTest
#            os: ubuntu-latest
#          - name: Android
#            test: testReleaseUnitTest
#            os: ubuntu-latest
#          - name: JS
#            test: kotlinUpgradeYarnLock jsTest
#            os: ubuntu-latest
#          - name: Apple
#            test: iosX64Test macosArm64Test
#            os: macos-latest
#          - name: Windows
#            test: mingwX64Test
#            os: windows-latest
#    runs-on: ${{ matrix.os }}
#    name: ${{ matrix.name }}
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Set up Java
#        uses: actions/setup-java@v4
#        with:
#          distribution: corretto
#          java-version: 21
#
#      - name: Setup Gradle
#        uses: gradle/actions/setup-gradle@v4
#
#      - name: Setup WireGuard
#        uses: ./.github/actions/wireguard-action
#        with:
#          WIREGUARD_PRIVATE_KEY: ${{ secrets.WIREGUARD_PRIVATE_KEY }}
#          WIREGUARD_INTERFACE_ADDRESS: ${{ secrets.WIREGUARD_INTERFACE_ADDRESS }}
#          WIREGUARD_PEER_PUBLIC_KEY: ${{ secrets.WIREGUARD_PEER_PUBLIC_KEY }}
#          WIREGUARD_PEER_ALLOWED_IPS: ${{ secrets.WIREGUARD_PEER_ALLOWED_IPS }}
#          WIREGUARD_PEER_ENDPOINT: ${{ secrets.WIREGUARD_PEER_ENDPOINT }}
#
#      - name: Tests
#        run: ./gradlew ${{ matrix.test }} --rerun-tasks --no-build-cache

  python-build:
    name: Python build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Python build
        uses: ./.github/actions/python-build-action

      - name: Setup pylint
        run: pip install pylint

      - name: Python check
        run: pylint --errors-only doordeck-sdk/build/bin/mingwX64/python/src/doordeck_headless_sdk

  pre-release:
    name: Pre-release
    needs: [python-build]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.pre-release-tag.outputs.tag }}
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "Doordeck Development"
          git config --global user.email "development@doordeck.com"

      - name: Tag for release (if on main)
        if: github.ref == 'refs/heads/main'
        run: ./gradlew final -x test

      - name: Store tag
        id: pre-release-tag
        run: echo "tag=$(git describe --tags --abbrev=0 | sed 's/^v//')" >> "$GITHUB_OUTPUT" # i.e: 0.74.0

  spm:
    name: SPM publish
    needs: [pre-release]
    runs-on: macos-latest
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    permissions:
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::135184807345:role/GitHubAction-HeadlessSDKRelease
          aws-region: eu-west-1

      - name: Generate artifact
        run: ./gradlew assembleDoordeckSDKReleaseXCFramework

      - name: Publish
        run: aws s3 cp doordeck-sdk/DoordeckSDK.xcframework.zip s3://cdn.doordeck.com/xcframework/v${{ needs.pre-release.outputs.tag }}/

  cocoapods:
    name: CocoaPods publish
    needs: [pre-release, spm]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Setup CocoaPods
        run: sudo gem install cocoapods

      - name: Generate artifact
        run: ./gradlew -Prelease.useLastTag=true podSpecRelease

      - name: Publish
        env:
          COCOAPODS_TRUNK_TOKEN: ${{ secrets.COCOAPODS_TRUNK_TOKEN }}
        run: pod trunk push doordeck-sdk/build/cocoapods/publish/release/DoordeckSDK.podspec --allow-warnings

  npm:
    name: NPM publish
    needs: [pre-release]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 'latest'
          registry-url: 'https://registry.npmjs.org'
          scope: '@doordeck'

      - name: Generate artifact
        run: ./gradlew -Prelease.useLastTag=true kotlinUpgradeYarnLock jsBrowserProductionLibraryDistribution

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISHING_TOKEN }}
        run: |
          cd build/js/packages/doordeck-sdk
          npm publish --access public

  maven:
    name: Maven publish
    needs: [pre-release]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Publish
        env:
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.MAVEN_TOKEN }}
          MAVEN_SIGN_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
          MAVEN_SIGN_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: ./gradlew -Prelease.useLastTag=true kotlinUpgradeYarnLock doordeck-sdk:publishToSonatype closeAndReleaseSonatypeStagingRepository -x test

  nuget:
    name: Nuget publish
    needs: [pre-release]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: windows-latest
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Setup NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x

      - name: Setup ClangSharpPInvokeGenerator
        run: dotnet tool install --global ClangSharpPInvokeGenerator

      - name: Generate artifact
        run: ./gradlew mingwX64Binaries

      - name: Adjust header
        run: |
          sed -i \
            -e 's/_\$$/_/g' \
            -e 's/\$//g' \
            "doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk_api.h"

      - name: Generate bindings
        run: |
          ClangSharpPInvokeGenerator \
            -f doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk_api.h \
            -o doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk/DoordeckHeadlessBindings.cs \
            -l Doordeck.Headless.Sdk.dll \
            -n Doordeck.Headless.Sdk

      - name: Adjust bindings
        run: |
          sed -i \
            -e '/^\s*\[.*NativeTypeName.*\]\s*$/d' \
            -e 's/\[.*NativeTypeName([^]]*)\]//g' \
            "doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk/DoordeckHeadlessBindings.cs"

      - name: Generate .nuspec file
        run: ./gradlew -Prelease.useLastTag=true csharpPack

      - name: Generate .nupkg file
        run: |
          nuget pack doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk.nuspec \
            -OutputDirectory doordeck-sdk/build/bin/mingwX64/csharp/

      - name: Publish
        env:
          NUGET_TOKEN: ${{ secrets.NUGET_TOKEN }}
        run: |
          nuget push doordeck-sdk/build/bin/mingwX64/csharp/Doordeck.Headless.Sdk.${{ needs.pre-release.outputs.tag }}.nupkg \
            -Source https://api.nuget.org/v3/index.json \
            -ApiKey ${{ secrets.NUGET_TOKEN }}

  pypi:
    name: PyPi publish
    needs: [pre-release]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: corretto
          java-version: 21

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.2'

      - name: Setup SWIG
        run: sudo apt-get update && sudo apt-get install -y swig

      - name: Setup Mingw
        run: sudo apt-get install -y swig mingw-w64

      - name: Setup GCC
        run: sudo apt-get install -y swig mingw-w64 gcc g++

      - name: Setup python build
        run: python -m pip install build

      - name: Generate artifact
        run: ./gradlew mingwX64Binaries

      - name: Adjust header
        run: |
          sed -i \
            -e 's/_\$$/_/g' \
            -e 's/\$//g' \
            "doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk_api.h"

      - name: Generate pyproject file
        run: ./gradlew -Prelease.useLastTag=true pythonPack

      - name: Download python for windows
        run: |
          curl -LO https://www.python.org/ftp/python/3.13.2/python-3.13.2-embed-amd64.zip
          mv python-3.13.2-embed-amd64.zip doordeck-sdk/build/bin/mingwX64/python
          unzip doordeck-sdk/build/bin/mingwX64/python/python-3.13.2-embed-amd64.zip -d doordeck-sdk/build/bin/mingwX64/python/windows-python

      - name: Generate bindings
        run: |
          swig -python -D_MSC_VER -o doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk_wrap.c \
            -outdir doordeck-sdk/build/bin/mingwX64/python/src/doordeck_headless_sdk \
            doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk.i

      - name: Compile bindings
        run: |
          x86_64-w64-mingw32-gcc -shared -o doordeck-sdk/build/bin/mingwX64/python/src/doordeck_headless_sdk/_doordeck_headless_sdk.pyd \
            doordeck-sdk/build/bin/mingwX64/python/doordeck_headless_sdk_wrap.c \
            doordeck-sdk/build/bin/mingwX64/releaseShared/Doordeck.Headless.Sdk.dll \
            -I $(python -c "import sysconfig; print(sysconfig.get_paths()['include'])") \
            -L doordeck-sdk/build/bin/mingwX64/python/windows-python \
            -lpython313

      - name: Python build
        run: python -m build doordeck-sdk/build/bin/mingwX64/python

      - name: Publish
        uses: pypa/gh-action-pypi-publish@release/v1.12
        with:
          packages-dir: doordeck-sdk/build/bin/mingwX64/python/dist/

  release:
    name: GitHub Release
    needs: [pre-release, spm, cocoapods, npm, maven, nuget, pypi]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: 'v${{ needs.pre-release.outputs.tag }}'

      - name: Setup Git
        run: |
          git config --global user.name "Doordeck Development"
          git config --global user.email "development@doordeck.com"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create v${{ needs.pre-release.outputs.tag }} --title "Release v${{ needs.pre-release.outputs.tag }}" --verify-tag --generate-notes

  spm-release:
    name: SPM release
    needs: [pre-release, release]
    if: (success() && github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Trigger SPM release workflow
        run: |
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.PAT }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/doordeck/doordeck-headless-sdk-spm/dispatches \
            -d "{\"event_type\": \"spm-release\", \"client_payload\": {\"tag\": \"${{ needs.pre-release.outputs.tag }}\"}}"